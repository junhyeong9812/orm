<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.benchmark.orm.domain.user.mapper.AddressMapper">
    <!-- ResultMap 정의 -->
    <resultMap id="addressResultMap" type="com.benchmark.orm.domain.user.entity.Address">
        <id property="id" column="id"/>
        <result property="zipcode" column="zipcode"/>
        <result property="detail" column="detail"/>
        <result property="isDefault" column="is_default"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <association property="user" javaType="com.benchmark.orm.domain.user.entity.User">
            <id property="id" column="user_id"/>
            <result property="username" column="username"/>
            <result property="email" column="email"/>
        </association>
    </resultMap>

    <!-- 주소 등록 -->
    <insert id="insert" parameterType="com.benchmark.orm.domain.user.entity.Address" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO address (zipcode, detail, is_default, user_id, created_at, updated_at)
        VALUES (#{zipcode}, #{detail}, #{isDefault}, #{user.id},
        COALESCE(#{createdAt}, CURRENT_TIMESTAMP), COALESCE(#{updatedAt}, CURRENT_TIMESTAMP))
    </insert>

    <!-- 주소 정보 수정 -->
    <update id="update" parameterType="com.benchmark.orm.domain.user.entity.Address">
        UPDATE address
        SET zipcode = #{zipcode},
        detail = #{detail},
        is_default = #{isDefault},
        <if test="user != null and user.id != null">
            user_id = #{user.id},
        </if>
        updated_at = CURRENT_TIMESTAMP
        WHERE id = #{id}
    </update>

    <!-- ID로 주소 삭제 -->
    <delete id="deleteById" parameterType="long">
        DELETE FROM address WHERE id = #{id}
    </delete>

    <!-- 사용자 ID로 주소 삭제 -->
    <delete id="deleteByUserId" parameterType="long">
        DELETE FROM address WHERE user_id = #{userId}
    </delete>

    <!-- ID로 주소 조회 - ResultMap 사용 및 조인 추가 -->
    <select id="findById" parameterType="long" resultMap="addressResultMap">
        SELECT a.*, u.id as user_id, u.username, u.email
        FROM address a
        LEFT JOIN users u ON a.user_id = u.id
        WHERE a.id = #{id}
    </select>

    <!-- 사용자 ID로 주소 목록 조회 - ResultMap 사용 및 조인 추가 -->
    <select id="findByUserId" parameterType="long" resultMap="addressResultMap">
        SELECT a.*, u.id as user_id, u.username, u.email
        FROM address a
        LEFT JOIN users u ON a.user_id = u.id
        WHERE a.user_id = #{userId}
    </select>

    <!-- 사용자 ID로 기본 주소 조회 - ResultMap 사용 및 조인 추가 -->
    <select id="findDefaultByUserId" parameterType="long" resultMap="addressResultMap">
        SELECT a.*, u.id as user_id, u.username, u.email
        FROM address a
        LEFT JOIN users u ON a.user_id = u.id
        WHERE a.user_id = #{userId} AND a.is_default = true LIMIT 1
    </select>

    <!-- 모든 주소 조회 - ResultMap 사용 및 조인 추가 -->
    <select id="findAll" resultMap="addressResultMap">
        SELECT a.*, u.id as user_id, u.username, u.email
        FROM address a
        LEFT JOIN users u ON a.user_id = u.id
    </select>

    <!-- 페이징된 주소 조회 - ResultMap 사용 및 조인 추가 -->
    <select id="findAllWithPaging" resultMap="addressResultMap">
        SELECT a.*, u.id as user_id, u.username, u.email
        FROM address a
        LEFT JOIN users u ON a.user_id = u.id
        ORDER BY a.id ASC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 사용자 ID로 페이징된 주소 조회 - ResultMap 사용 및 조인 추가 -->
    <select id="findByUserIdWithPaging" resultMap="addressResultMap">
        SELECT a.*, u.id as user_id, u.username, u.email
        FROM address a
        LEFT JOIN users u ON a.user_id = u.id
        WHERE a.user_id = #{userId}
        ORDER BY a.id ASC
        LIMIT #{limit} OFFSET #{offset}
    </select>
</mapper>