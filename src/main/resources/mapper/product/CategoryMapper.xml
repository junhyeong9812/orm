<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.benchmark.orm.domain.product.mapper.CategoryMapper">
    <!-- 카테고리 등록 (useGeneratedKeys와 keyProperty 추가) -->
    <insert id="insert" parameterType="com.benchmark.orm.domain.product.entity.Category"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO category (name, parent_id)
        VALUES (#{name}, #{parent.id})
    </insert>

    <!-- 카테고리 정보 수정 -->
    <update id="update" parameterType="com.benchmark.orm.domain.product.entity.Category">
        UPDATE category
        SET name = #{name}, parent_id = #{parent.id}
        WHERE id = #{id}
    </update>

    <!-- ID로 카테고리 삭제 -->
    <delete id="deleteById" parameterType="long">
        DELETE FROM category WHERE id = #{id}
    </delete>

    <!-- 결과 매핑 정의: 카테고리와 부모 카테고리 -->
    <resultMap id="categoryResultMap" type="com.benchmark.orm.domain.product.entity.Category">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <association property="parent" javaType="com.benchmark.orm.domain.product.entity.Category">
            <id property="id" column="parent_id"/>
            <result property="name" column="parent_name"/>
            <result property="createdAt" column="parent_created_at"/>
            <result property="updatedAt" column="parent_updated_at"/>
        </association>
    </resultMap>

    <!-- ID로 카테고리 조회 (부모 정보 포함) -->
    <select id="findById" parameterType="long" resultMap="categoryResultMap">
        SELECT c.id, c.name, c.created_at, c.updated_at,
        p.id as parent_id, p.name as parent_name,
        p.created_at as parent_created_at, p.updated_at as parent_updated_at
        FROM category c
        LEFT JOIN category p ON c.parent_id = p.id
        WHERE c.id = #{id}
    </select>

    <!-- 모든 카테고리 조회 (부모 정보 포함) -->
    <select id="findAll" resultMap="categoryResultMap">
        SELECT c.id, c.name, c.created_at, c.updated_at,
        p.id as parent_id, p.name as parent_name,
        p.created_at as parent_created_at, p.updated_at as parent_updated_at
        FROM category c
        LEFT JOIN category p ON c.parent_id = p.id
    </select>

    <!-- 페이징된 카테고리 조회 (부모 정보 포함) -->
    <select id="findAllWithPaging" resultMap="categoryResultMap">
        SELECT c.id, c.name, c.created_at, c.updated_at,
        p.id as parent_id, p.name as parent_name,
        p.created_at as parent_created_at, p.updated_at as parent_updated_at
        FROM category c
        LEFT JOIN category p ON c.parent_id = p.id
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 정렬된 카테고리 조회 (부모 정보 포함) -->
    <select id="findAllWithSorting" resultMap="categoryResultMap">
        SELECT c.id, c.name, c.created_at, c.updated_at,
        p.id as parent_id, p.name as parent_name,
        p.created_at as parent_created_at, p.updated_at as parent_updated_at
        FROM category c
        LEFT JOIN category p ON c.parent_id = p.id
        ORDER BY c.${sortColumn} ${sortDirection}
    </select>

    <!-- 페이징 및 정렬된 카테고리 조회 (부모 정보 포함) -->
    <select id="findAllWithPagingAndSorting" resultMap="categoryResultMap">
        SELECT c.id, c.name, c.created_at, c.updated_at,
        p.id as parent_id, p.name as parent_name,
        p.created_at as parent_created_at, p.updated_at as parent_updated_at
        FROM category c
        LEFT JOIN category p ON c.parent_id = p.id
        ORDER BY c.${sortColumn} ${sortDirection}
        LIMIT #{limit} OFFSET #{offset}
    </select>
</mapper>