<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.benchmark.orm.domain.product.mapper.ProductMapper">
    <!-- 상품 등록 -->
    <insert id="insert" parameterType="com.benchmark.orm.domain.product.entity.Product">
        INSERT INTO product (name, price, brand_id, category_id)
        VALUES (#{name}, #{price}, #{brand.id}, #{category.id})
    </insert>

    <!-- 상품 정보 수정 -->
    <update id="update" parameterType="com.benchmark.orm.domain.product.entity.Product">
        UPDATE product
        SET name = #{name},
        price = #{price},
        brand_id = #{brand.id},
        category_id = #{category.id}
        WHERE id = #{id}
    </update>

    <!-- ID로 상품 삭제 -->
    <delete id="deleteById" parameterType="long">
        DELETE FROM product WHERE id = #{id}
    </delete>

    <!-- ID로 상품 조회 -->
    <select id="findById" parameterType="long" resultType="com.benchmark.orm.domain.product.entity.Product">
        SELECT * FROM product WHERE id = #{id}
    </select>

    <!-- 모든 상품 조회 -->
    <select id="findAll" resultType="com.benchmark.orm.domain.product.entity.Product">
        SELECT * FROM product
    </select>

    <!-- 페이징된 상품 조회 -->
    <select id="findAllWithPaging" resultType="com.benchmark.orm.domain.product.entity.Product">
        SELECT * FROM product LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 정렬된 상품 조회 -->
    <select id="findAllWithSorting" resultType="com.benchmark.orm.domain.product.entity.Product">
        SELECT * FROM product ORDER BY ${sortColumn} ${sortDirection}
    </select>

    <!-- 페이징 및 정렬된 상품 조회 -->
    <select id="findAllWithPagingAndSorting" resultType="com.benchmark.orm.domain.product.entity.Product">
        SELECT * FROM product ORDER BY ${sortColumn} ${sortDirection}
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 검색 조건에 따른 WHERE 절 -->
    <sql id="searchCondition">
        <where>
            <if test="searchDto != null">
                <if test="searchDto.keyword != null and searchDto.keyword != ''">
                    name LIKE CONCAT('%', #{searchDto.keyword}, '%')
                </if>
                <if test="searchDto.minPrice != null and searchDto.maxPrice != null">
                    <choose>
                        <when test="searchDto.keyword == null or searchDto.keyword == ''">
                            price BETWEEN #{searchDto.minPrice} AND #{searchDto.maxPrice}
                        </when>
                        <otherwise>
                            AND price BETWEEN #{searchDto.minPrice} AND #{searchDto.maxPrice}
                        </otherwise>
                    </choose>
                </if>
                <if test="searchDto.minPrice != null and searchDto.maxPrice == null">
                    <choose>
                        <when test="searchDto.keyword == null or searchDto.keyword == ''">
                            price &gt;= #{searchDto.minPrice}
                        </when>
                        <otherwise>
                            AND price &gt;= #{searchDto.minPrice}
                        </otherwise>
                    </choose>
                </if>
                <if test="searchDto.minPrice == null and searchDto.maxPrice != null">
                    <choose>
                        <when test="searchDto.keyword == null or searchDto.keyword == ''">
                            price &lt;= #{searchDto.maxPrice}
                        </when>
                        <otherwise>
                            AND price &lt;= #{searchDto.maxPrice}
                        </otherwise>
                    </choose>
                </if>
                <if test="searchDto.brandId != null">
                    <choose>
                        <when test="(searchDto.keyword == null or searchDto.keyword == '')
                        and (searchDto.minPrice == null) and (searchDto.maxPrice == null)">
                            brand_id = #{searchDto.brandId}
                        </when>
                        <otherwise>
                            AND brand_id = #{searchDto.brandId}
                        </otherwise>
                    </choose>
                </if>
                <if test="searchDto.categoryId != null">
                    <choose>
                        <when test="(searchDto.keyword == null or searchDto.keyword == '')
                        and (searchDto.minPrice == null) and (searchDto.maxPrice == null)
                        and (searchDto.brandId == null)">
                            category_id = #{searchDto.categoryId}
                        </when>
                        <otherwise>
                            AND category_id = #{searchDto.categoryId}
                        </otherwise>
                    </choose>
                </if>
            </if>
        </where>
    </sql>

    <!-- 검색 조건을 이용한 상품 검색 -->
    <select id="searchProducts" resultType="com.benchmark.orm.domain.product.entity.Product">
        SELECT * FROM product
        <include refid="searchCondition"/>
        <if test="sortColumn != null and sortDirection != null">
            ORDER BY ${sortColumn} ${sortDirection}
        </if>
        <if test="limit > 0">
            LIMIT #{limit} OFFSET #{offset}
        </if>
    </select>

    <!-- 검색 조건을 이용한 상품 총 개수 조회 -->
    <select id="countBySearchDto" resultType="int">
        SELECT COUNT(*) FROM product
        <include refid="searchCondition"/>
    </select>
</mapper>