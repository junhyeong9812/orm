<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.benchmark.orm.domain.user.mapper.UserMapper">
    <!-- 사용자 등록 -->
    <insert id="insert" parameterType="com.benchmark.orm.domain.user.entity.User">
        INSERT INTO users (username, email)
        VALUES (#{username}, #{email})
    </insert>

    <!-- 사용자 정보 수정 -->
    <update id="update" parameterType="com.benchmark.orm.domain.user.entity.User">
        UPDATE users
        SET username = #{username},
        email = #{email}
        WHERE id = #{id}
    </update>

    <!-- ID로 사용자 삭제 -->
    <delete id="deleteById" parameterType="long">
        DELETE FROM users WHERE id = #{id}
    </delete>

    <!-- ID로 사용자 조회 -->
    <select id="findById" parameterType="long" resultType="com.benchmark.orm.domain.user.entity.User">
        SELECT * FROM users WHERE id = #{id}
    </select>

    <!-- 모든 사용자 조회 -->
    <select id="findAll" resultType="com.benchmark.orm.domain.user.entity.User">
        SELECT * FROM users
    </select>

    <!-- 페이징된 사용자 조회 -->
    <select id="findAllWithPaging" resultType="com.benchmark.orm.domain.user.entity.User">
        SELECT * FROM users
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 정렬된 사용자 조회 -->
    <select id="findAllWithSorting" resultType="com.benchmark.orm.domain.user.entity.User">
        SELECT * FROM users
        ORDER BY ${sortColumn} ${sortDirection}
    </select>

    <!-- 페이징 및 정렬된 사용자 조회 -->
    <select id="findAllWithPagingAndSorting" resultType="com.benchmark.orm.domain.user.entity.User">
        SELECT * FROM users
        ORDER BY ${sortColumn} ${sortDirection}
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 검색 조건에 따른 WHERE 절 -->
    <sql id="searchCondition">
        <where>
            <if test="searchDto != null">
                <if test="searchDto.keyword != null and searchDto.keyword != ''">
                    (username LIKE CONCAT('%', #{searchDto.keyword}, '%')
                    OR email LIKE CONCAT('%', #{searchDto.keyword}, '%'))
                </if>
                <if test="searchDto.username != null and searchDto.username != ''">
                    <choose>
                        <when test="searchDto.keyword == null or searchDto.keyword == ''">
                            username LIKE CONCAT('%', #{searchDto.username}, '%')
                        </when>
                        <otherwise>
                            AND username LIKE CONCAT('%', #{searchDto.username}, '%')
                        </otherwise>
                    </choose>
                </if>
                <if test="searchDto.email != null and searchDto.email != ''">
                    <choose>
                        <when test="(searchDto.keyword == null or searchDto.keyword == '')
                        and (searchDto.username == null or searchDto.username == '')">
                            email LIKE CONCAT('%', #{searchDto.email}, '%')
                        </when>
                        <otherwise>
                            AND email LIKE CONCAT('%', #{searchDto.email}, '%')
                        </otherwise>
                    </choose>
                </if>
            </if>
        </where>
    </sql>

    <!-- 검색 조건을 이용한 사용자 검색 -->
    <select id="searchUsers" resultType="com.benchmark.orm.domain.user.entity.User">
        SELECT * FROM users
        <include refid="searchCondition"/>
        <if test="sortColumn != null and sortDirection != null">
            ORDER BY ${sortColumn} ${sortDirection}
        </if>
        <if test="limit > 0">
            LIMIT #{limit} OFFSET #{offset}
        </if>
    </select>

    <!-- 검색 조건을 이용한 사용자 총 개수 조회 -->
    <select id="countBySearchDto" resultType="int">
        SELECT COUNT(*) FROM users
        <include refid="searchCondition"/>
    </select>
</mapper>